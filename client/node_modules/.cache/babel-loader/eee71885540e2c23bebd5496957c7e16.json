{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/muttaki/ReactAgain/stream/client/src/components/streams/StreamShow.js\";\nimport React from 'react';\nimport { fetchStream } from '../../actions';\nimport { connect } from 'react-redux';\nimport flv from 'flv.js';\n\nclass StreamShow extends React.Component {\n  constructor(props) {\n    super(props);\n    this.videoRef = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidMount() {\n    this.props.fetchStream(this.props.match.params.id);\n    this.player = flv.createPlayer({\n      type: 'flv',\n      url: `http://localhost:8000/live/${id}.flv`\n    });\n    this.player.attachMediaElement(this.videoRef.current);\n    this.player.load();\n  }\n\n  render() {\n    if (!this.props.stream) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 14\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"video\", {\n        ref: this.videoRef,\n        style: {\n          width: '100%'\n        },\n        controls: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), this.props.stream.title]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    stream: state.streams[ownProps.match.params.id]\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchStream\n})(StreamShow);","map":{"version":3,"sources":["/home/muttaki/ReactAgain/stream/client/src/components/streams/StreamShow.js"],"names":["React","fetchStream","connect","flv","StreamShow","Component","constructor","props","videoRef","createRef","componentDidMount","match","params","id","player","createPlayer","type","url","attachMediaElement","current","load","render","stream","width","title","mapStateToProps","state","ownProps","streams"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,GAAP,MAAiB,QAAjB;;AAEA,MAAMC,UAAN,SAAyBJ,KAAK,CAACK,SAA/B,CAAyC;AAEvCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEA,SAAKC,QAAL,gBAAgBR,KAAK,CAACS,SAAN,EAAhB;AACD;;AAGDC,EAAAA,iBAAiB,GAAG;AAClB,SAAKH,KAAL,CAAWN,WAAX,CAAuB,KAAKM,KAAL,CAAWI,KAAX,CAAiBC,MAAjB,CAAwBC,EAA/C;AAEA,SAAKC,MAAL,GAAcX,GAAG,CAACY,YAAJ,CAAiB;AAC7BC,MAAAA,IAAI,EAAE,KADuB;AAE7BC,MAAAA,GAAG,EAAI,8BAA6BJ,EAAG;AAFV,KAAjB,CAAd;AAIA,SAAKC,MAAL,CAAYI,kBAAZ,CAA+B,KAAKV,QAAL,CAAcW,OAA7C;AACA,SAAKL,MAAL,CAAYM,IAAZ;AACD;;AAEDC,EAAAA,MAAM,GAAG;AAEP,QAAG,CAAC,KAAKd,KAAL,CAAWe,MAAf,EAAuB;AACrB,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACD;;AAED,wBACE;AAAA,8BACE;AAAO,QAAA,GAAG,EAAE,KAAKd,QAAjB;AAA2B,QAAA,KAAK,EAAE;AAAEe,UAAAA,KAAK,EAAE;AAAT,SAAlC;AAAqD,QAAA,QAAQ,EAAE;AAA/D;AAAA;AAAA;AAAA;AAAA,cADF,EAEG,KAAKhB,KAAL,CAAWe,MAAX,CAAkBE,KAFrB;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAMD;;AAhCsC;;AAmCzC,MAAMC,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC3C,SAAO;AAAEL,IAAAA,MAAM,EAAEI,KAAK,CAACE,OAAN,CAAcD,QAAQ,CAAChB,KAAT,CAAeC,MAAf,CAAsBC,EAApC;AAAV,GAAP;AACD,CAFD;;AAIA,eAAeX,OAAO,CAACuB,eAAD,EAAkB;AAAExB,EAAAA;AAAF,CAAlB,CAAP,CAA0CG,UAA1C,CAAf","sourcesContent":["import React from 'react';\nimport { fetchStream } from '../../actions';\nimport { connect } from 'react-redux';\nimport flv from  'flv.js';\n\nclass StreamShow extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.videoRef = React.createRef();\n  }\n\n\n  componentDidMount() {\n    this.props.fetchStream(this.props.match.params.id);  \n\n    this.player = flv.createPlayer({\n      type: 'flv',\n      url:  `http://localhost:8000/live/${id}.flv`\n    });\n    this.player.attachMediaElement(this.videoRef.current);\n    this.player.load();\n  }\n\n  render() {\n    \n    if(!this.props.stream) {\n      return <div>Loading</div>\n    }\n\n    return(\n      <div>\n        <video ref={this.videoRef} style={{ width: '100%' }} controls={true} />\n        {this.props.stream.title}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return { stream: state.streams[ownProps.match.params.id]}\n}\n\nexport default connect(mapStateToProps, { fetchStream })(StreamShow);"]},"metadata":{},"sourceType":"module"}