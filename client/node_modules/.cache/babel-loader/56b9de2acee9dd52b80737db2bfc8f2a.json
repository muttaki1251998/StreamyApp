{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/muttaki/ReactAgain/stream/client/src/components/streams/StreamCreate.js\";\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nclass StreamCreate extends React.Component {\n  renderError(meta) {\n    if (meta.touched && meta.error) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ui message error\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"header\",\n          children: meta.error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 10,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n  renderForm(formProps) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"field\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: formProps.label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...formProps.input,\n        autoComplete: \"off\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this), this.renderError(formProps.meta)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this);\n  }\n\n  onSubmit(formProps) {\n    console.log(formProps);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: this.props.handleSubmit(this.onSubmit),\n      className: \"ui form\",\n      children: [/*#__PURE__*/_jsxDEV(Field, {\n        name: \"title\",\n        component: this.renderForm,\n        label: \"Title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Field, {\n        name: \"description\",\n        component: this.renderForm,\n        label: \"Description\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"ui button primary\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst validateForm = formValues => {\n  const errors = {};\n\n  if (!formValues.title) {\n    errors.title = \"You must enter a title\";\n  }\n\n  if (!formValues.description) {\n    errors.description = \"You must enter a description\";\n  }\n\n  return errors;\n}; // Hooking up redux-form\n\n\nexport default reduxForm({\n  form: 'streamCreate',\n  validate: validateForm\n})(StreamCreate);","map":{"version":3,"sources":["/home/muttaki/ReactAgain/stream/client/src/components/streams/StreamCreate.js"],"names":["React","Field","reduxForm","StreamCreate","Component","renderError","meta","touched","error","renderForm","formProps","label","input","onSubmit","console","log","render","props","handleSubmit","validateForm","formValues","errors","title","description","form","validate"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,YAAjC;;AAEA,MAAMC,YAAN,SAA2BH,KAAK,CAACI,SAAjC,CAA2C;AAEzCC,EAAAA,WAAW,CAACC,IAAD,EAAO;AAChB,QAAIA,IAAI,CAACC,OAAL,IAAgBD,IAAI,CAACE,KAAzB,EAAgC;AAC9B,0BACE;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA,+BACE;AAAK,UAAA,SAAS,EAAC,QAAf;AAAA,oBAAyBF,IAAI,CAACE;AAA9B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF;AAKD;AACF;;AAEDC,EAAAA,UAAU,CAACC,SAAD,EAAY;AACpB,wBACE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA,8BACE;AAAA,kBAAQA,SAAS,CAACC;AAAlB;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,sBAAWD,SAAS,CAACE,KAArB;AAA4B,QAAA,YAAY,EAAC;AAAzC;AAAA;AAAA;AAAA;AAAA,cAFF,EAGG,KAAKP,WAAL,CAAiBK,SAAS,CAACJ,IAA3B,CAHH;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAOD;;AAEDO,EAAAA,QAAQ,CAACH,SAAD,EAAY;AAClBI,IAAAA,OAAO,CAACC,GAAR,CAAYL,SAAZ;AACD;;AAEDM,EAAAA,MAAM,GAAG;AACP,wBACE;AAAM,MAAA,QAAQ,EAAE,KAAKC,KAAL,CAAWC,YAAX,CAAwB,KAAKL,QAA7B,CAAhB;AAAwD,MAAA,SAAS,EAAC,SAAlE;AAAA,8BACE,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,OAAZ;AAAoB,QAAA,SAAS,EAAE,KAAKJ,UAApC;AAAgD,QAAA,KAAK,EAAC;AAAtD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,aAAZ;AAA0B,QAAA,SAAS,EAAE,KAAKA,UAA1C;AAAsD,QAAA,KAAK,EAAC;AAA5D;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAQ,QAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAOD;;AAlCwC;;AAqC3C,MAAMU,YAAY,GAAGC,UAAU,IAAI;AAEjC,QAAMC,MAAM,GAAG,EAAf;;AAEA,MAAI,CAACD,UAAU,CAACE,KAAhB,EAAuB;AACrBD,IAAAA,MAAM,CAACC,KAAP,GAAe,wBAAf;AACD;;AAED,MAAI,CAACF,UAAU,CAACG,WAAhB,EAA6B;AAC3BF,IAAAA,MAAM,CAACE,WAAP,GAAqB,8BAArB;AACD;;AAED,SAAOF,MAAP;AACD,CAbD,C,CAeA;;;AACA,eAAenB,SAAS,CAAC;AACvBsB,EAAAA,IAAI,EAAE,cADiB;AAEvBC,EAAAA,QAAQ,EAAEN;AAFa,CAAD,CAAT,CAGZhB,YAHY,CAAf","sourcesContent":["import React from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nclass StreamCreate extends React.Component {\n\n  renderError(meta) {\n    if (meta.touched && meta.error) {\n      return (\n        <div className=\"ui message error\">\n          <div className=\"header\">{meta.error}</div>\n        </div>\n      );\n    }\n  }\n\n  renderForm(formProps) {\n    return (\n      <div className=\"field\">\n        <label>{formProps.label}</label>\n        <input {...formProps.input} autoComplete=\"off\" />\n        {this.renderError(formProps.meta)}\n      </div>\n    );\n  }\n\n  onSubmit(formProps) {\n    console.log(formProps);\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.props.handleSubmit(this.onSubmit)} className=\"ui form\">\n        <Field name=\"title\" component={this.renderForm} label=\"Title\" />\n        <Field name=\"description\" component={this.renderForm} label=\"Description\" />\n        <button className=\"ui button primary\">Submit</button>\n      </form>\n    );\n  }\n}\n\nconst validateForm = formValues => {\n\n  const errors = {};\n\n  if (!formValues.title) {\n    errors.title = \"You must enter a title\"\n  }\n\n  if (!formValues.description) {\n    errors.description = \"You must enter a description\"\n  }\n\n  return errors;\n}\n\n// Hooking up redux-form\nexport default reduxForm({\n  form: 'streamCreate',\n  validate: validateForm\n})(StreamCreate);"]},"metadata":{},"sourceType":"module"}